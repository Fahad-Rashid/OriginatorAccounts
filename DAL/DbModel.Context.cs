//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OriginatorEntities : DbContext
    {
        public OriginatorEntities()
            : base("name=OriginatorEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<PMCompanyData> PMCompanyDatas { get; set; }
        public virtual DbSet<PMProjectCategory> PMProjectCategories { get; set; }
        public virtual DbSet<PMProjectClient> PMProjectClients { get; set; }
        public virtual DbSet<PMProjectMilestone> PMProjectMilestones { get; set; }
        public virtual DbSet<PMProjectMSTask> PMProjectMSTasks { get; set; }
        public virtual DbSet<PMProjectResource> PMProjectResources { get; set; }
        public virtual DbSet<PMProjectRole> PMProjectRoles { get; set; }
        public virtual DbSet<PMProject> PMProjects { get; set; }
        public virtual DbSet<PMProjectType> PMProjectTypes { get; set; }
        public virtual DbSet<PMProjectWorker> PMProjectWorkers { get; set; }
        public virtual DbSet<PMProjectWorkerRole> PMProjectWorkerRoles { get; set; }
        public virtual DbSet<tblAccountSubType> tblAccountSubTypes { get; set; }
        public virtual DbSet<tblAccountTransaction> tblAccountTransactions { get; set; }
        public virtual DbSet<tblAccountType> tblAccountTypes { get; set; }
        public virtual DbSet<tblCompany> tblCompanies { get; set; }
        public virtual DbSet<tblRole> tblRoles { get; set; }
        public virtual DbSet<tblSubAccount> tblSubAccounts { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblUserRole> tblUserRoles { get; set; }
        public virtual DbSet<PMViewGetBARA> PMViewGetBARAs { get; set; }
        public virtual DbSet<ViewSubAccount> ViewSubAccounts { get; set; }
        public virtual DbSet<ViewUser> ViewUsers { get; set; }
        public virtual DbSet<tblAccount> tblAccounts { get; set; }
        public virtual DbSet<tblUserSubAccount> tblUserSubAccounts { get; set; }
    
        public virtual int PMSPCalculateProjectsAmount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PMSPCalculateProjectsAmount");
        }
    
        public virtual int spCalculateProjectsAmount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCalculateProjectsAmount");
        }
    
        public virtual int SpCheckScreenRole(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCheckScreenRole", userIdParameter);
        }
    
        public virtual int spEnterTransaction(string title, Nullable<long> accountId, Nullable<long> projectId, Nullable<long> transactionTypeId, Nullable<decimal> amount, string status)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            var transactionTypeIdParameter = transactionTypeId.HasValue ?
                new ObjectParameter("TransactionTypeId", transactionTypeId) :
                new ObjectParameter("TransactionTypeId", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEnterTransaction", titleParameter, accountIdParameter, projectIdParameter, transactionTypeIdParameter, amountParameter, statusParameter);
        }
    
        public virtual ObjectResult<SPMilestoneMembers_Result> SPMilestoneMembers(Nullable<long> millestoneId)
        {
            var millestoneIdParameter = millestoneId.HasValue ?
                new ObjectParameter("MillestoneId", millestoneId) :
                new ObjectParameter("MillestoneId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPMilestoneMembers_Result>("SPMilestoneMembers", millestoneIdParameter);
        }
    
        public virtual int SPTranscation(string description, Nullable<decimal> amount, Nullable<System.DateTime> createdDate, Nullable<long> createdBy, Nullable<long> fromId, Nullable<long> toId, Nullable<long> fromAccountId, Nullable<long> toAccountId)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var fromIdParameter = fromId.HasValue ?
                new ObjectParameter("FromId", fromId) :
                new ObjectParameter("FromId", typeof(long));
    
            var toIdParameter = toId.HasValue ?
                new ObjectParameter("ToId", toId) :
                new ObjectParameter("ToId", typeof(long));
    
            var fromAccountIdParameter = fromAccountId.HasValue ?
                new ObjectParameter("FromAccountId", fromAccountId) :
                new ObjectParameter("FromAccountId", typeof(long));
    
            var toAccountIdParameter = toAccountId.HasValue ?
                new ObjectParameter("ToAccountId", toAccountId) :
                new ObjectParameter("ToAccountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTranscation", descriptionParameter, amountParameter, createdDateParameter, createdByParameter, fromIdParameter, toIdParameter, fromAccountIdParameter, toAccountIdParameter);
        }
    
        public virtual ObjectResult<SPGetUserAccounts_Result> SPGetUserAccounts(Nullable<long> userId, Nullable<long> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetUserAccounts_Result>("SPGetUserAccounts", userIdParameter, companyIdParameter);
        }
    }
}
